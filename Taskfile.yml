# florist/Taskfile (see https://taskfile.dev)

version: '3'
set: [pipefail]

tasks:

  pre-commit:
    cmds:
      - task: build
      - task: lint
      - task: check-coverage
      - cmd: go mod tidy

  build:example:
    desc: Build the example provisioner.
    cmds:
      - go build -o bin/example ./example

  build:dev:
    desc: Build the provisioner for the project
    cmds:
      - go build -o bin/dev ./florist/roles/dev
      - GOOS=linux go build -o bin/linux/dev ./florist/roles/dev

  build:
    desc: Test successful build.
    cmds:
      - go build ./...

  lint:
    cmds:
      - go vet ./...
      - staticcheck ./...

  test:
    desc: Run all the unit tests; makes sense only if invoking from the VM.
    cmds:
      - mkdir -p ./bin
      # - go clean -testcache
      - gotestsum -- -count=1 -coverprofile=./bin/coverage.out ./...

  test:all:vm:clean:
    desc: Run all the tests on a VM from a clean snapshot
    cmds:
      - task: _vm:restore
      - task: test:all:vm:dirty

  check-coverage:
    desc: 'Usage: task test check-coverage'
    vars:
      # This coverage is for non-destructive tests (host NOT disposable).
      COVERAGE_MAP:
        map:
          darwin: '24.7%'
          linux: '24.0%'
      # Can be set from command-line, see usage in .cirrus.yml
      COVERAGE: '{{default (index .COVERAGE_MAP OS) .COVERAGE}}'
    cmds:
      - cmd: |
          have=$(go tool cover -func ./bin/coverage.out | grep ^total: | awk '{print $3}')
          if [ $have != {{.COVERAGE}} ]; then
            echo "Coverage changed: have: $have; want: {{.COVERAGE}}"
            exit 1
          else
            echo "Coverage: $have"
          fi
        silent: true

  test:all:vm:dirty:
    desc: |
      Run all the tests on a VM on the current snapshot (thus dirty)
      (faster but inaccurate and flaky)
    cmds:
      - task: vm:set_date
      - ssh -F ssh.config.vagrant florist-dev "cd florist && sudo task test:all"

  vm:set_date:
    desc: Set the current date in the VM (expects the VM to be running).
    cmds:
      - ssh -F ssh.config.vagrant florist-dev sudo sntp --step 0.pool.ntp.org

  browser:
    desc: "Show code coverage in browser (usage: task test:<subtarget> browser)"
    cmds:
      - go tool cover -html=./bin/coverage.out

  clean:
    desc: Remove the build artifacts
    cmds:
      - rm -rf bin

  vm:init:
    desc: Create a VM from scratch, provision and take a snapshot. Use `vm:restore` to restore the snapshot to pristine state.
    cmds:
    - task: build:dev
    - vagrant destroy --force
    - vagrant up
    # Generate a SSH configuration file
    - vagrant ssh-config > ssh.config.vagrant
    # For some reason, vagrant adds "LogLevel FATAL" to the generated file.
    # We want the default logging level instead.
    - sed -i.bak 's/LogLevel FATAL//' ssh.config.vagrant
    - rm ssh.config.vagrant.bak
    # Mark this VM as a target for destructive tests.
    - ssh -F ssh.config.vagrant florist-dev sudo mkdir -p /opt/florist/disposable
    # Provision the VM with the "dev" bouquet.
    - ssh -F ssh.config.vagrant florist-dev sudo "./florist/bin/linux/dev install"
    # Install other deps. I am unsure this is the best approach...
    - ssh -F ssh.config.vagrant florist-dev "GOBIN=/usr/local/bin sudo --preserve-env=GOBIN task -d florist install:deps"
      # Take snapshot, name `pristine`
    - vagrant snapshot save pristine
    - vagrant halt

  vm:restore:
    desc: Restore the VM snapshot to pristine state and set the current date
    cmds:
      - task: _vm:restore
      - task: vm:set_date

  _vm:restore:
    cmds:
      - vagrant snapshot restore pristine

  install:deps:
    desc: Install tool dependencies.
    cmds:
      - go install honnef.co/go/tools/cmd/staticcheck@latest
      - go install gotest.tools/gotestsum@latest
      - go install github.com/gokrazy/rsync/cmd/gokr-rsync@latest

  pulumi:up:
    desc: Run pulumi up.
    cmds:
      - task: pulumi
        vars:
          CLI_ARGS: up {{if eq .preview "no"}}--skip-preview{{end}}

  pulumi:down:
    desc: Run pulumi down.
    cmds:
      - task: pulumi
        vars:
          CLI_ARGS: down {{if eq .preview "no"}}--skip-preview{{end}}

  pulumi:ssh:
    desc: Connect to the cloud VM.
    cmds:
      - ssh -F ssh.config.pulumi root@{{.ADDR}}
    vars:
      ADDR:
        sh: envchain florist pulumi -C pulumi stack output IPv6

  pulumi:upload:
    desc: Build and upload tests to the VM.
    cmds:
      - rm -rf ./bin/*
      # Build test2json from the Go stdlib, needed by gotestsum
      - >-
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build
        -o ./bin/test2json -ldflags="-s -w" cmd/test2json
      - GOOS=linux GOARCH=amd64 go test -cover -c ./... -o ./bin/ > /dev/null
      - >-
        gokr-rsync --quiet -P -a -t -e "ssh -F ssh.config.pulumi"
        ./bin/*.test ./bin/test2json pkg/florist/testdata ./pulumi/runtests.sh
        root@[{{.ADDR}}]:/opt/florist/test/ 2> /dev/null
    vars:
      ADDR:
        sh: envchain florist pulumi -C pulumi stack output IPv6

  pulumi:test:
    desc: Build, upload and run the tests on the cloud VM.
    cmds:
      - >-
        ssh -F ssh.config.pulumi root@{{.ADDR}}
        "mkdir -p /opt/florist &&
        mkdir -p /opt/florist/disposable &&
        mkdir -p /opt/florist/test"
      - task: pulumi:upload
      - ssh -F ssh.config.pulumi root@{{.ADDR}} "time /opt/florist/test/runtests.sh"
    vars:
      ADDR:
        sh: envchain florist pulumi -C pulumi stack output IPv6

  wait-for-conn:
    cmds:
      # Sometimes SSH is not ready yet when VM just created :-/
      -  go run ./cmd/wait-for-conn --verbose --max-wait=20s --address [{{.ADDR}}]:22
    vars:
      ADDR:
        sh: envchain florist pulumi -C pulumi stack output IPv6

  pulumi:all:
    desc: Bring up, run tests, tear down.
    cmds:
      - task: pulumi:down
        vars: {preview: no}
      - task: pulumi:up
        vars: {preview: no}
      - task: wait-for-conn
      - task: pulumi:test
      - task: pulumi:down
        vars: {preview: no}

  pulumi:
    desc: >
      Run 'pulumi' with secrets: task pulumi -- ...
    cmds:
      - envchain florist pulumi -C pulumi {{.CLI_ARGS}}
    vars:
      env: dev

  hcloud:
    desc: >
      Run 'hcloud' with secrets: task hcloud -- ...
    cmds:
      - envchain florist hcloud {{.CLI_ARGS}}
