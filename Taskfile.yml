# https://taskfile.dev

version: '3'

vars:
  GOLANGCI_VERSION: v1.43.0
  GOTESTSUM_VERSION: v1.7.0
  GOTESTSUM:
    sh: if which gotestsum > /dev/null; then echo gotestsum; fi
  GOTEST: "{{if .GOTESTSUM}}{{.GOTESTSUM}} --{{else}}go test{{end}}"
  #GOTEST: go test -v

tasks:
  build:
    desc: Build all
    cmds:
      - go build ./...
      - task: build:example

  build:example:
    desc: Build the example
    cmds:
      - go build -o bin/example-florist ./example
      - GOOS=linux go build -o bin/linux/example-florist ./example

  test:unit:
    desc: Run the unit tests on the host
    cmds:
      - rm -f coverage.out
      - '{{.GOTEST}} -count=1 -short -coverprofile=coverage.out ./...'

  test:all:vm:clean:
    desc: Run all the tests on a VM from a clean snapshot
    cmds:
      - vagrant snapshot restore pristine
      - task: test:all:vm:dirty

  test:all:vm:dirty:
    desc: Run all the tests on a VM on the current snapshot (thus dirty) (faster but inaccurate and flaky)
    cmds:
      - rm -f coverage.out
      # -coverpkg=./...
      - '{{.GOTEST}} -count=1 -coverprofile=coverage.out
        -exec="xprog -v ssh --sudo --cfg $PWD/ssh_config --" ./...'
    env:
      GOOS: linux

  browser:
    desc: "Show code coverage in browser (usage: task test:<subtarget> browser)"
    cmds:
      - go tool cover -html=coverage.out

  clean:
    desc: Remove the build artifacts
    cmds:
      - rm -rf bin coverage.out

  prepare-vm:
    cmds:
    - vagrant destroy --force
    - vagrant up
    # Take snapshot, name `pristine`
    - vagrant snapshot save pristine
    # Generate a SSH configuration file
    - vagrant ssh-config > ssh_config
    - vagrant halt

  install-deps:
    desc: Install tool dependencies.
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@{{.GOLANGCI_VERSION}}
      - go install gotest.tools/gotestsum@{{.GOTESTSUM_VERSION}}
